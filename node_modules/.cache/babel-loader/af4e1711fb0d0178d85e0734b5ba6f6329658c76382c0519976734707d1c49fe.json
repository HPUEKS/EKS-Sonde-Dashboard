{"ast":null,"code":"var _jsxFileName = \"/Users/sophiebulatovic/EKS-Sonde-Dashboard/src/SensorChart.js\";\nimport React from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { format, parse, subDays, subWeeks, subMonths, subYears, isAfter } from 'date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SensorChart = ({\n  title,\n  data,\n  dataKey,\n  color,\n  timeRange\n}) => {\n  const now = new Date();\n\n  // Define Y-axis labels for different sensors\n  const yAxisLabels = {\n    temperature: 'Temperature (°C)',\n    conductivity: 'Conductivity (µS/cm)',\n    salinity: 'Salinity (ppt)',\n    dissolved_solids: 'Total Dissolved Solids (mg/L)',\n    dissolved_oxygen: 'Dissolved Oxygen (mg/L)'\n  };\n  const getStartDate = () => {\n    switch (timeRange) {\n      case 'Day':\n        return subDays(now, 1);\n      case 'Week':\n        return subWeeks(now, 1);\n      case 'Month':\n        return subMonths(now, 1);\n      case 'Year':\n        return subYears(now, 1);\n      default:\n        return subDays(now, 1);\n    }\n  };\n  const startDate = getStartDate();\n\n  // Prepare and filter data based on the time range\n  const chartData = Object.keys(data).map(timestamp => {\n    const parsedDate = parse(timestamp, 'yyyy-MM-dd_HH-mm-ss', new Date());\n    return {\n      time: parsedDate,\n      [dataKey]: data[timestamp][dataKey]\n    };\n  }).filter(entry => isAfter(entry.time, startDate));\n  return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 300,\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      data: chartData,\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"time\",\n        tickFormatter: time => format(time, 'MMM d, HH:mm'),\n        tick: {\n          fontSize: 12\n        },\n        label: {\n          value: \"Time\",\n          position: \"insideBottom\",\n          offset: -5\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        label: {\n          value: yAxisLabels[dataKey] || \"Sensor Value\",\n          angle: -90,\n          position: \"insideLeft\",\n          style: {\n            textAnchor: \"middle\"\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        labelFormatter: time => format(time, 'PPPpp')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: dataKey,\n        stroke: color,\n        strokeWidth: 2,\n        dot: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_c = SensorChart;\nexport default SensorChart;\nvar _c;\n$RefreshReg$(_c, \"SensorChart\");","map":{"version":3,"names":["React","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","format","parse","subDays","subWeeks","subMonths","subYears","isAfter","jsxDEV","_jsxDEV","SensorChart","title","data","dataKey","color","timeRange","now","Date","yAxisLabels","temperature","conductivity","salinity","dissolved_solids","dissolved_oxygen","getStartDate","startDate","chartData","Object","keys","map","timestamp","parsedDate","time","filter","entry","width","height","children","strokeDasharray","fileName","_jsxFileName","lineNumber","columnNumber","tickFormatter","tick","fontSize","label","value","position","offset","angle","style","textAnchor","labelFormatter","type","stroke","strokeWidth","dot","_c","$RefreshReg$"],"sources":["/Users/sophiebulatovic/EKS-Sonde-Dashboard/src/SensorChart.js"],"sourcesContent":["import React from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from \n'recharts';\nimport { format, parse, subDays, subWeeks, subMonths, subYears, isAfter } from 'date-fns';\n\nconst SensorChart = ({ title, data, dataKey, color, timeRange }) => {\n  const now = new Date();\n\n  // Define Y-axis labels for different sensors\n  const yAxisLabels = {\n    temperature: 'Temperature (°C)',\n    conductivity: 'Conductivity (µS/cm)',\n    salinity: 'Salinity (ppt)',\n    dissolved_solids: 'Total Dissolved Solids (mg/L)',\n    dissolved_oxygen: 'Dissolved Oxygen (mg/L)',\n  };\n\n  const getStartDate = () => {\n    switch (timeRange) {\n      case 'Day': return subDays(now, 1);\n      case 'Week': return subWeeks(now, 1);\n      case 'Month': return subMonths(now, 1);\n      case 'Year': return subYears(now, 1);\n      default: return subDays(now, 1);\n    }\n  };\n\n  const startDate = getStartDate();\n\n  // Prepare and filter data based on the time range\n  const chartData = Object.keys(data)\n    .map((timestamp) => {\n      const parsedDate = parse(timestamp, 'yyyy-MM-dd_HH-mm-ss', new Date());\n      return {\n        time: parsedDate,\n        [dataKey]: data[timestamp][dataKey],\n      };\n    })\n    .filter((entry) => isAfter(entry.time, startDate));\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <LineChart data={chartData}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n\n        {/* X-Axis with label */}\n        <XAxis\n          dataKey=\"time\"\n          tickFormatter={(time) => format(time, 'MMM d, HH:mm')}\n          tick={{ fontSize: 12 }}\n          label={{ \n            value: \"Time\", \n            position: \"insideBottom\", \n            offset: -5 \n          }}\n        />\n\n        {/* Y-Axis with dynamic label */}\n        <YAxis\n          label={{ \n            value: yAxisLabels[dataKey] || \"Sensor Value\", \n            angle: -90, \n            position: \"insideLeft\", \n            style: { textAnchor: \"middle\" } \n          }}\n        />\n\n        <Tooltip labelFormatter={(time) => format(time, 'PPPpp')} />\n        <Line type=\"monotone\" dataKey={dataKey} stroke={color} strokeWidth={2} dot={false} />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default SensorChart;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}