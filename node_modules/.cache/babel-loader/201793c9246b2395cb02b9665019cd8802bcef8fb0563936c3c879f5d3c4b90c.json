{"ast":null,"code":"import React from'react';import{LineChart,Line,XAxis,YAxis,CartesianGrid,Tooltip,ResponsiveContainer}from'recharts';import{format,parse,subDays,subWeeks,subMonths,subYears,isAfter}from'date-fns';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SensorChart=_ref=>{let{title,data,dataKey,color,timeRange}=_ref;const now=new Date();// Define Y-axis labels for different sensors\nconst yAxisLabels={temperature:'Temperature (°C)',conductivity:'Conductivity (µS/cm)',salinity:'Salinity (ppt)',dissolved_solids:'Total Dissolved Solids (mg/L)',dissolved_oxygen:'Dissolved Oxygen (mg/L)'};const getStartDate=()=>{switch(timeRange){case'Day':return subDays(now,1);case'Week':return subWeeks(now,1);case'Month':return subMonths(now,1);case'Year':return subYears(now,1);default:return subDays(now,1);}};const startDate=getStartDate();// Prepare and filter data based on the time range\nconst chartData=Object.keys(data).map(timestamp=>{const parsedDate=parse(timestamp,'yyyy-MM-dd_HH-mm-ss',new Date());return{time:parsedDate,[dataKey]:data[timestamp][dataKey]};}).filter(entry=>isAfter(entry.time,startDate));return/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:300,children:/*#__PURE__*/_jsxs(LineChart,{data:chartData,children:[/*#__PURE__*/_jsx(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/_jsx(XAxis,{dataKey:\"time\",tickFormatter:time=>format(time,'MMM d, HH:mm'),tick:{fontSize:12},label:{value:\"Time\",position:\"insideBottom\",offset:-5}}),/*#__PURE__*/_jsx(YAxis,{label:{value:yAxisLabels[dataKey]||\"Sensor Value\",angle:-90,position:\"insideLeft\",style:{textAnchor:\"middle\"}}}),/*#__PURE__*/_jsx(Tooltip,{labelFormatter:time=>format(time,'PPPpp')}),/*#__PURE__*/_jsx(Line,{type:\"monotone\",dataKey:dataKey,stroke:color,strokeWidth:2,dot:false})]})});};export default SensorChart;","map":{"version":3,"names":["React","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","format","parse","subDays","subWeeks","subMonths","subYears","isAfter","jsx","_jsx","jsxs","_jsxs","SensorChart","_ref","title","data","dataKey","color","timeRange","now","Date","yAxisLabels","temperature","conductivity","salinity","dissolved_solids","dissolved_oxygen","getStartDate","startDate","chartData","Object","keys","map","timestamp","parsedDate","time","filter","entry","width","height","children","strokeDasharray","tickFormatter","tick","fontSize","label","value","position","offset","angle","style","textAnchor","labelFormatter","type","stroke","strokeWidth","dot"],"sources":["/Users/sophiebulatovic/EKS-Sonde-Dashboard/src/SensorChart.js"],"sourcesContent":["import React from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from \n'recharts';\nimport { format, parse, subDays, subWeeks, subMonths, subYears, isAfter } from 'date-fns';\n\nconst SensorChart = ({ title, data, dataKey, color, timeRange }) => {\n  const now = new Date();\n\n  // Define Y-axis labels for different sensors\n  const yAxisLabels = {\n    temperature: 'Temperature (°C)',\n    conductivity: 'Conductivity (µS/cm)',\n    salinity: 'Salinity (ppt)',\n    dissolved_solids: 'Total Dissolved Solids (mg/L)',\n    dissolved_oxygen: 'Dissolved Oxygen (mg/L)',\n  };\n\n  const getStartDate = () => {\n    switch (timeRange) {\n      case 'Day': return subDays(now, 1);\n      case 'Week': return subWeeks(now, 1);\n      case 'Month': return subMonths(now, 1);\n      case 'Year': return subYears(now, 1);\n      default: return subDays(now, 1);\n    }\n  };\n\n  const startDate = getStartDate();\n\n  // Prepare and filter data based on the time range\n  const chartData = Object.keys(data)\n    .map((timestamp) => {\n      const parsedDate = parse(timestamp, 'yyyy-MM-dd_HH-mm-ss', new Date());\n      return {\n        time: parsedDate,\n        [dataKey]: data[timestamp][dataKey],\n      };\n    })\n    .filter((entry) => isAfter(entry.time, startDate));\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <LineChart data={chartData}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n\n        {/* X-Axis with label */}\n        <XAxis\n          dataKey=\"time\"\n          tickFormatter={(time) => format(time, 'MMM d, HH:mm')}\n          tick={{ fontSize: 12 }}\n          label={{ \n            value: \"Time\", \n            position: \"insideBottom\", \n            offset: -5 \n          }}\n        />\n\n        {/* Y-Axis with dynamic label */}\n        <YAxis\n          label={{ \n            value: yAxisLabels[dataKey] || \"Sensor Value\", \n            angle: -90, \n            position: \"insideLeft\", \n            style: { textAnchor: \"middle\" } \n          }}\n        />\n\n        <Tooltip labelFormatter={(time) => format(time, 'PPPpp')} />\n        <Line type=\"monotone\" dataKey={dataKey} stroke={color} strokeWidth={2} dot={false} />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default SensorChart;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}