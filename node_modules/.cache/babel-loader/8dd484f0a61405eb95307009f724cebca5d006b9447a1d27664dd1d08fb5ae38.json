{"ast":null,"code":"var _jsxFileName = \"/Users/sophiebulatovic/EKS-Sonde-Dashboard/src/SensorChart.js\";\nimport React from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { format, parse, isAfter, isBefore, isValid } from 'date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SensorChart = ({\n  title,\n  data,\n  dataKey,\n  color,\n  startDate,\n  endDate\n}) => {\n  if (!data || Object.keys(data).length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center\",\n      children: \"No data available for the selected range.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Define Y-axis labels for different sensors\n  const yAxisLabels = {\n    temperature: 'Temperature (°C)',\n    conductivity: 'Conductivity (µS/cm)',\n    salinity: 'Salinity (ppt)',\n    dissolved_solids: 'Total Dissolved Solids (mg/L)',\n    dissolved_oxygen: 'Dissolved Oxygen (mg/L)'\n  };\n\n  // Convert the database timestamps into JavaScript Date objects and filter by selected range\n  const filteredData = Object.keys(data).map(timestamp => {\n    let entryDate = parse(timestamp, 'yyyy-MM-dd_HH-mm-ss', new Date()); // Ensure correct parsing\n    if (!isValid(entryDate)) {\n      console.warn(\"Invalid timestamp detected:\", timestamp);\n      return null; // Skip invalid timestamps\n    }\n    return {\n      time: entryDate,\n      [dataKey]: data[timestamp][dataKey]\n    };\n  }).filter(entry => entry !== null) // Remove invalid entries\n  .filter(({\n    time\n  }) => (!startDate || isAfter(time, startDate)) && (!endDate || isBefore(time, endDate)));\n  return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: 300,\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      data: filteredData,\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"time\",\n        tickFormatter: time => isValid(time) ? format(time, 'MMM d, HH:mm') : \"\",\n        tick: {\n          fontSize: 12\n        },\n        label: {\n          value: \"Time\",\n          position: \"insideBottom\",\n          offset: -5\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        label: {\n          value: yAxisLabels[dataKey] || \"Sensor Value\",\n          angle: -90,\n          position: \"insideLeft\",\n          style: {\n            textAnchor: \"middle\"\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        labelFormatter: time => isValid(time) ? format(time, 'PPPpp') : \"Invalid Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: dataKey,\n        stroke: color,\n        strokeWidth: 2,\n        dot: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_c = SensorChart;\nexport default SensorChart;\nvar _c;\n$RefreshReg$(_c, \"SensorChart\");","map":{"version":3,"names":["React","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","format","parse","isAfter","isBefore","isValid","jsxDEV","_jsxDEV","SensorChart","title","data","dataKey","color","startDate","endDate","Object","keys","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","yAxisLabels","temperature","conductivity","salinity","dissolved_solids","dissolved_oxygen","filteredData","map","timestamp","entryDate","Date","console","warn","time","filter","entry","width","height","strokeDasharray","tickFormatter","tick","fontSize","label","value","position","offset","angle","style","textAnchor","labelFormatter","type","stroke","strokeWidth","dot","_c","$RefreshReg$"],"sources":["/Users/sophiebulatovic/EKS-Sonde-Dashboard/src/SensorChart.js"],"sourcesContent":["import React from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { format, parse, isAfter, isBefore, isValid } from 'date-fns';\n\nconst SensorChart = ({ title, data, dataKey, color, startDate, endDate }) => {\n  if (!data || Object.keys(data).length === 0) {\n    return <p className=\"text-center\">No data available for the selected range.</p>;\n  }\n\n  // Define Y-axis labels for different sensors\n  const yAxisLabels = {\n    temperature: 'Temperature (°C)',\n    conductivity: 'Conductivity (µS/cm)',\n    salinity: 'Salinity (ppt)',\n    dissolved_solids: 'Total Dissolved Solids (mg/L)',\n    dissolved_oxygen: 'Dissolved Oxygen (mg/L)',\n  };\n\n  // Convert the database timestamps into JavaScript Date objects and filter by selected range\n  const filteredData = Object.keys(data)\n    .map((timestamp) => {\n      let entryDate = parse(timestamp, 'yyyy-MM-dd_HH-mm-ss', new Date()); // Ensure correct parsing\n      if (!isValid(entryDate)) {\n        console.warn(\"Invalid timestamp detected:\", timestamp);\n        return null; // Skip invalid timestamps\n      }\n      return {\n        time: entryDate,\n        [dataKey]: data[timestamp][dataKey],\n      };\n    })\n    .filter(entry => entry !== null) // Remove invalid entries\n    .filter(({ time }) => (!startDate || isAfter(time, startDate)) && (!endDate || isBefore(time, endDate)));\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <LineChart data={filteredData}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n\n        {/* X-Axis with label */}\n        <XAxis\n          dataKey=\"time\"\n          tickFormatter={(time) => (isValid(time) ? format(time, 'MMM d, HH:mm') : \"\")}\n          tick={{ fontSize: 12 }}\n          label={{ value: \"Time\", position: \"insideBottom\", offset: -5 }}\n        />\n\n        {/* Y-Axis with dynamic label */}\n        <YAxis\n          label={{ value: yAxisLabels[dataKey] || \"Sensor Value\", angle: -90, position: \"insideLeft\", style: { textAnchor: \"middle\" } }}\n        />\n\n        <Tooltip labelFormatter={(time) => (isValid(time) ? format(time, 'PPPpp') : \"Invalid Date\")} />\n        <Line type=\"monotone\" dataKey={dataKey} stroke={color} strokeWidth={2} dot={false} />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default SensorChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}